/// # 4方向に移動する座標を生成するイテレータを返す関数です。
/// イテレータはタプルを返します。
/// タプルはx軸方向、y軸方向の順で値を持ちます。
///
/// 以下の順で移動方向が生成されます。
///   - 上
///   - 右
///   - 下
///   - 左
///
/// ## `!0`について
/// `-1`の代わりに`!0`を使用しています。
/// `!0`を加算した場合、オーバーフローが発生して`x - 1`と`x + !0`が同じ値になります。
/// 意図的にオバーフローを発生させる必要させているため、リリースビルドで実行してください。
/// リリリースビルドの場合、オーバーフローを検出しないため問題ありませんが、
/// デバッグビルドの場合、オーバーフローを検出するためエラーになります。
pub fn move_into_4_directions() -> impl Iterator<Item = (usize, usize)> {
    [(0, 1), (1, 0), (0, !0), (!0, 0)].into_iter()
}

/// # 8方向に移動する座標を生成するイテレータを返す関数です。
/// イテレータはタプルを返します。
/// タプルはx軸方向、y軸方向の順で値を持ちます。
///
/// 以下の順で移動方向が生成されます。
///   - 上
///   - 右上
///   - 右
///   - 右下
///   - 下
///   - 左下
///   - 左
///   - 左上
///
/// ## `!0`について
/// `-1`の代わりに`!0`を使用しています。
/// `!0`を加算した場合、オーバーフローが発生して`x - 1`と`x + !0`が同じ値になります。
/// 意図的にオバーフローを発生させる必要させているため、リリースビルドで実行してください。
/// リリリースビルドの場合、オーバーフローを検出しないため問題ありませんが、
/// デバッグビルドの場合、オーバーフローを検出するためエラーになります。
pub fn move_into_8_directions() -> impl Iterator<Item = (usize, usize)> {
    [
        (0, 1),
        (1, 1),
        (1, 0),
        (1, !0),
        (0, !0),
        (!0, !0),
        (!0, 0),
        (!0, 1),
    ]
    .into_iter()
}
